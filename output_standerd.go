package main

import (
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/gorilla/feeds"
	"github.com/mmcdole/gofeed"
)

// OutputStanderd は、フィードを標準出力に出力します。
// フィルタリング済みか否かに応じて、表示を調整します。
func OutputStanderd(data interface{}) {
	var itemsToProcess []*FilteredItem

	// 型アサーションでフィルタリング済みかチェック
	if filtered, ok := data.([]*FilteredItem); ok {
		itemsToProcess = filtered
	} else if feeds, ok := data.([]*gofeed.Feed); ok {
		// フィルタリングされていない場合は、FilteredItemに変換して統一的に扱う
		items := []*gofeed.Item{}
		for _, feed := range feeds {
			items = append(items, feed.Items...)
		}
		itemsToProcess = make([]*FilteredItem, len(items))
		for i, item := range items {
			itemsToProcess[i] = &FilteredItem{Item: item}
		}
	} else {
		log.Println("サポートされていないデータ型です。")
		return
	}

	now := time.Now()
	out_feed := &feeds.Feed{
		Title:       "feed2cli generated feed",
		Link:        &feeds.Link{Href: ""},
		Description: "A feed generated by feed2cli",
		Created:     now,
	}

	for _, v := range itemsToProcess {
		description := v.Description

		// FilteredItemの追加情報をDescriptionに追記
		var newDescription strings.Builder
		newDescription.WriteString(v.Description)

		if v.HatenaBookmarkCount != "" && v.HatenaBookmarkCount != "0" {
			newDescription.WriteString(fmt.Sprintf("\n<p>Hatena Bookmark: <b>%s</b></p>", v.HatenaBookmarkCount))
		}

		if len(v.HatenaBookmarkComments) > 0 {
			newDescription.WriteString("\n<p><b>Comments:</b></p><ul>")
			for _, c := range v.HatenaBookmarkComments {
				if c.Comment != "" {
					newDescription.WriteString(fmt.Sprintf("<li>%s (%s): %s</li>", c.User, c.Timestamp, c.Comment))
				}
			}
			newDescription.WriteString("</ul>")
		}
		description = newDescription.String()

		item := &feeds.Item{
			Title:       v.Title,
			Link:        &feeds.Link{Href: v.Link},
			Description: description,
			Created:     now, // TODO: 元のCreatedタイムスタンプを維持する
		}
		out_feed.Add(item)
	}

	rss, err := out_feed.ToRss()
	if err != nil {
		log.Fatal(err)
	}
	fmt.Print(rss)
}